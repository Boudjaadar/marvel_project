import sqlite3
import networkx as nx
from pyvis.network import Network
import ast

# Connexion √† la base de donn√©es
conn = sqlite3.connect("marvel.db")
cursor = conn.cursor()

# Cr√©er la table components si elle n'existe pas
cursor.execute("""
CREATE TABLE IF NOT EXISTS components (
    id INTEGER PRIMARY KEY,
    wavenumber REAL,
    uncertainty REAL,
    quantum_numbers_up TEXT,
    quantum_numbers_low TEXT,
    line_status INTEGER,
    src_status INTEGER,
    src TEXT,
    component INTEGER
)
""")
conn.commit()

# R√©cup√©rer les transitions
cursor.execute("SELECT id, wavenumber, uncertainty, quantum_numbers_up, quantum_numbers_low, line_status, src_status, src FROM transitions")
transitions = cursor.fetchall()

# V√©rification des donn√©es
if not transitions:
    print("\n‚ùå Aucune transition trouv√©e dans la base de donn√©es.")
    conn.close()
    exit()
else:
    print(f"\n‚úÖ {len(transitions)} transitions r√©cup√©r√©es.")

# Cr√©er un graphe orient√©
G = nx.DiGraph()

# Ajouter les transitions au graphe
for transition in transitions:
    id_transition, wavenumber, uncertainty, quantum_numbers_up, quantum_numbers_low, line_status, src_status, src = transition
    
    # Convertir les nombres quantiques en tuples (si n√©cessaire)
    try:
        quantum_numbers_low = ast.literal_eval(quantum_numbers_low)
        quantum_numbers_up = ast.literal_eval(quantum_numbers_up)
        
        # Convertir les listes en tuples
        if isinstance(quantum_numbers_low, list):
            quantum_numbers_low = tuple(quantum_numbers_low)
        if isinstance(quantum_numbers_up, list):
            quantum_numbers_up = tuple(quantum_numbers_up)
    except (ValueError, SyntaxError):
        pass  # Garder sous forme de cha√Æne en cas d'√©chec
    
    # Convertir en cha√Ænes pour PyVis
    quantum_numbers_low_str = str(quantum_numbers_low)
    quantum_numbers_up_str = str(quantum_numbers_up)
    
    # Ajouter les n≈ìuds
    if quantum_numbers_low_str not in G:
        G.add_node(quantum_numbers_low_str, label=quantum_numbers_low_str)
    if quantum_numbers_up_str not in G:
        G.add_node(quantum_numbers_up_str, label=quantum_numbers_up_str)
    
    # Ajouter l'ar√™te avec poids et ID de transition
    G.add_edge(quantum_numbers_low_str, quantum_numbers_up_str, weight=wavenumber, id=id_transition)

# Afficher le nombre de n≈ìuds et ar√™tes pour v√©rification
nombre_noeuds = G.number_of_nodes()
nombre_aretes = G.number_of_edges()

print("Nombre de n≈ìuds :", nombre_noeuds)
print("Nombre d'ar√™tes :", nombre_aretes)

# D√©tection des n≈ìuds isol√©s
noeuds_isoles = [n for n in G.nodes if G.in_degree(n) == 0 and G.out_degree(n) == 0]
if noeuds_isoles:
    print("\n‚ö†Ô∏è N≈ìuds isol√©s d√©tect√©s :", noeuds_isoles)
else:
    print("\n‚úÖ Aucun n≈ìud isol√© d√©tect√©.")

# V√©rification de la connectivit√©
composantes_connexes = list(nx.weakly_connected_components(G))
print("\nNombre de composantes connexes :", len(composantes_connexes))
if len(composantes_connexes) > 1:
    print("‚ö†Ô∏è Le r√©seau n'est pas enti√®rement connexe.")
else:
    print("‚úÖ Le r√©seau est connexe.")

# D√©tection des cycles
try:
    cycles = list(nx.find_cycle(G))
    print("\nüîÑ Cycles d√©tect√©s :", cycles)
except nx.NetworkXNoCycle:
    print("\n‚úÖ Aucun cycle d√©tect√©.")

# Calcul du chemin critique
try:
    chemin_critique = nx.dag_longest_path(G, weight="weight")
    poids_total = sum(G.edges[chemin_critique[i], chemin_critique[i+1]]['weight']
                      for i in range(len(chemin_critique) - 1))
    print("\n‚≠ê Chemin critique :", chemin_critique)
    print("‚ö° Poids total du chemin critique :", poids_total)
except nx.NetworkXUnfeasible:
    print("\n‚ùå Impossible de calculer le chemin critique : le graphe contient des cycles.")

# Cr√©ation du r√©seau PyVis
net = Network(notebook=True, directed=True, cdn_resources='remote')

# Ajouter les n≈ìuds et les ar√™tes
for n≈ìud, donn√©es in G.nodes(data=True):
    color = "red" if n≈ìud in noeuds_isoles else "blue"
    net.add_node(n≈ìud, label=donn√©es.get("label", n≈ìud), color=color)

for d√©part, arriv√©e, donn√©es in G.edges(data=True):
    wavenumber = donn√©es["weight"]
    id_transition = donn√©es["id"]
    net.add_edge(d√©part, arriv√©e, value=wavenumber, title=f"Transition {id_transition}\nWavenumber: {wavenumber}")

# Activer la physique et les boutons
net.toggle_physics(True)
net.show_buttons(filter_=['physics'])

# G√©n√©ration et affichage
net.write_html("spectroscopic_network.html")
print("\n‚úÖ Graphe g√©n√©r√© : ouvrez spectroscopic_network.html dans un navigateur.")

# Peupler la table components avec les composantes connexes
for component_id, component in enumerate(composantes_connexes, start=1):
    for node in component:
        # R√©cup√©rer les transitions associ√©es √† ce n≈ìud
        edges = G.edges(node, data=True)
        for edge in edges:
            transition_id = edge[2]["id"]
            # R√©cup√©rer les donn√©es de la transition
            cursor.execute("SELECT * FROM transitions WHERE id = ?", (transition_id,))
            transition_data = cursor.fetchone()
            # Ins√©rer dans la table components
            cursor.execute("""
            INSERT INTO components (id, wavenumber, uncertainty, quantum_numbers_up, quantum_numbers_low, line_status, src_status, src, component)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (*transition_data, component_id))
conn.commit()
print("\n‚úÖ Table components peupl√©e avec les composantes connexes.")

# Fermer la connexion √† la base de donn√©es
conn.close()
